/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import controllers.DetalleTicketJpaController;
import controllers.ProductoJpaController;
import controllers.TicketJpaController;
import controllers.TpvJpaController;
import java.awt.Color;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import models.Carrito;
import models.DetalleTicket;
import models.DetalleTicketPK;
import models.Producto;
import models.Ticket;
import models.Tpv;

/**
 *
 * @author aiman
 */
public class Pago extends javax.swing.JDialog {

    private Escalar escalar = new Escalar();
    private CarritoV carrito;
    private Map<Integer, Producto> productos;
    private Tarjeta tarjeta;
    private int nuevoStock;

    /**
     * Creates new form Pago
     */
    public Pago(CarritoV parent, boolean modal, Map<Integer, Producto> map) {
        super(parent, modal);
        initComponents();
        escalar.escalarLabel(jLabel1, "/images/fondo2.png");
        this.carrito = parent;
        this.setLocationRelativeTo(null);
        this.productos = map;
        this.tarjeta = new Tarjeta("Aiman", 3041, new Date(2024, 12, 12), 433, 2100.00);
        mostrarDatosEditar();
        this.nuevoStock = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial Nova", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(225, 166, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("NºTarjeta:");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 130, 30));

        jLabel3.setFont(new java.awt.Font("Arial Nova", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(225, 166, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Fecha vencimiento:  ");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 130, 30));

        jLabel4.setFont(new java.awt.Font("Arial Nova", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(225, 166, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Nombre titular:");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 130, 30));

        jLabel5.setFont(new java.awt.Font("Arial Nova", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(225, 166, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("CVV: ");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 130, 30));

        jLabel6.setFont(new java.awt.Font("Arial Nova Cond", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(225, 166, 51));
        jLabel6.setText("    PASARELA DE PAGO");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 22, 240, 40));

        jTextField1.setText("");
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 80, 30));

        jTextField2.setText("");
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 80, 30));

        jTextField3.setText("");
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, 80, 30));

        jTextField4.setText("");
        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 80, 30));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Arial Nova", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(225, 166, 51));
        jButton1.setText("Pagar");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 90, 40));

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setFont(new java.awt.Font("Arial Nova", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, 90, 40));

        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 580, 390));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 0, 570, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Comparación de las fechas
        TicketJpaController t = new TicketJpaController();
        TpvJpaController tpv = new TpvJpaController();
        Tpv tpv1 = tpv.findTpv(1);
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//
//        try {
//            // Convertir el texto del jTextField3 a un objeto Date
//            Date fechaIngresada = dateFormat.parse(jTextField3.getText());
//
//            // Obtener la fecha de vencimiento de la tarjeta
//            Date fechaTarjeta = tarjeta.getFechaVencimiento();

//            // Comparar las fechas
//            if (fechaIngresada.equals(fechaTarjeta)) {
        // Acción a realizar si las fechas son iguales
        JOptionPane.showMessageDialog(null, "El pago se realizó con éxito");
        if (jTextField1.getText().equalsIgnoreCase(tarjeta.getNombreTitular()) || (Integer.parseInt(jTextField2.getText())) == (tarjeta.getNumeroTarjeta()) || Integer.parseInt(jTextField4.getText()) == tarjeta.getCVV()) {
            try {

                Ticket ticket = crearTicket();
                int idTicket = ticket.getIdTicket();
                System.out.println(idTicket);
                crearDetalleTicket(idTicket);
            } catch (Exception ex) {
                Logger.getLogger(Pago.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Datos incorrectos");
        }
//            } else {
//                
//                JOptionPane.showMessageDialog(null, "Las fechas no son iguales");
//            }
//        } catch (ParseException e) {
//            JOptionPane.showMessageDialog(null, "Fecha inválida, por favor use el formato dd/MM/yyyy");
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    public Ticket crearTicket() throws Exception {
        // Obtener la fecha actual y otros datos necesarios
        Date fechaActual = new Date();
        TpvJpaController tpvController = new TpvJpaController();
        ProductoJpaController prod = new ProductoJpaController();
        Tpv tpv = tpvController.findTpv(1); // Suponiendo que siempre es el TPV con ID 1
        BigDecimal importeTotal = calcularImporteTotal().setScale(2, RoundingMode.HALF_UP);
        TicketJpaController ticketController = new TicketJpaController();
        int numPedido = ticketController.findNumPedidoMax() + 1;
        for (Map.Entry<Integer, Producto> entry : carrito.getMap().entrySet()) {
            Integer num = entry.getKey();
            Producto producto = entry.getValue();
            nuevoStock = producto.getStock() - num;
            producto.setStock(nuevoStock);
            prod.edit(producto);
        }
        // Crear el Ticket con los datos obtenidos
        Ticket ticket = new Ticket(numPedido, importeTotal, fechaActual, tpv);
        ticketController.create(ticket);

        return ticket;
    }

    public BigDecimal calcularImporteTotal() {
        BigDecimal total = BigDecimal.ZERO;
        for (Map.Entry<Integer, Producto> entry : carrito.getMap().entrySet()) {
            Producto producto = entry.getValue();
            int cantidad = entry.getKey();
            BigDecimal cantidadBigDecimal = BigDecimal.valueOf(cantidad);
            BigDecimal subtotal = producto.getPrecio().multiply(cantidadBigDecimal);

            // Sumo el subtotal al total 
            total = total.add(subtotal);

            // aplico el iva segun el que tenga
            if (producto.getIva().equalsIgnoreCase("21")) {
                BigDecimal iva21 = subtotal.multiply(BigDecimal.valueOf(0.21));
                total = total.add(iva21);
            } else if (producto.getIva().equalsIgnoreCase("10")) {
                BigDecimal iva10 = subtotal.multiply(BigDecimal.valueOf(0.10));
                total = total.add(iva10);
            }
        }
        return total;
    }

    public List<DetalleTicket> crearDetalleTicket(int idTicket) throws Exception {
        DetalleTicketJpaController dtj = new DetalleTicketJpaController();
        List<DetalleTicket> lista = new ArrayList<>();

        Ticket ticket = new Ticket(idTicket);

        for (Map.Entry<Integer, Producto> entry : this.carrito.getMap().entrySet()) {
            DetalleTicketPK pk = new DetalleTicketPK();
            pk.setIdTicket(idTicket);
            pk.setIdProducto(entry.getValue().getIdProducto());

            Producto producto = entry.getValue(); // Obtener el Producto
            DetalleTicket dt = new DetalleTicket(pk, entry.getKey());
            dt.setProducto(producto); // Establecer el Producto
            dt.setTicket(ticket);
            dt.setCantidadProducto(entry.getKey());

            lista.add(dt);
            dtj.create(dt);
        }

        return lista;
    }

    private void mostrarDatosEditar() {
        try {
            Date date = tarjeta.getFechaVencimiento();
            SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String fechaString = dt.format(date);

            // Llena los campos del formulario con los datos del producto
            jTextField1.setText(tarjeta.getNombreTitular());
            jTextField1.setBackground(Color.GRAY);
            jTextField2.setText(String.valueOf(tarjeta.getNumeroTarjeta()));
            jTextField3.setText(fechaString);
            jTextField4.setText(String.valueOf(tarjeta.getCVV()));

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Error se ha salido del array.");
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar mostrar los datos para editar: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
