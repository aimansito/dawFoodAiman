/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import controllers.DetalleTicketJpaController;
import controllers.ProductoJpaController;
import controllers.TicketJpaController;
import controllers.TpvJpaController;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.DetalleTicket;
import models.DetalleTicketPK;
import models.Producto;
import models.Ticket;
import models.Tpv;

/**
 *
 * @author aiman
 */
public class CarritoV extends javax.swing.JDialog {

    private Escalar escalar = new Escalar();
    private Comprar padre;
    private Map<Integer,Producto> map;
    private String mensaje;

    public CarritoV(Comprar parent, boolean modal,Map<Integer,Producto> map) {
        super(parent, modal);
        padre = parent;
        this.setLocationRelativeTo(null);
        initComponents();
        escalar.escalarLabel(jLabel1, "/images/fondo2.png");
//        cargarDatosJTable()
        this.map = map;
        this.mensaje = "";
    }

//    private void cargarDatosJTable() {
//
//        ProductoJpaController prod = new ProductoJpaController();
//        List<Producto> prodList = prod.findProductoEntities();
//        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
//        modelo.setRowCount(0);
//
//        for (Producto producto : padre.getMap()) {
//            Object[] fila = new Object[6];
//            fila[0] = producto.getIdProducto();
//            fila[1] = producto.getIva();
//            fila[2] = producto.getPrecio();
//            fila[3] = producto.getStock();
//            fila[4] = producto.getDescripcion();
//            fila[5] = producto.getCodTipoProducto().getNomCat();
//            modelo.addRow(fila);
//        }
//
//        jTable1.setModel(modelo);
//
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(225, 166, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Carrito de Productos");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 250, 60));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButton1.setForeground(new java.awt.Color(225, 166, 51));
        jButton1.setText("VER CARRITO");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 150, 50));

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButton2.setForeground(new java.awt.Color(225, 166, 51));
        jButton2.setText("BORRAR UN PRODUCTO");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 150, 50));

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setText("Salir");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 430, 100, 30));

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButton4.setForeground(new java.awt.Color(225, 166, 51));
        jButton4.setText("VACIAR CARRITO");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 324, 140, 50));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        jButton5.setForeground(new java.awt.Color(51, 255, 51));
        jButton5.setText("COMPRAR");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(225, 166, 51)));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 324, 150, 50));

        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 660, 590));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (padre.getMap().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay productos en el carrito");
        } else {
            this.mensaje = "";
            for (Map.Entry<Integer, Producto> entry : padre.getMap().entrySet()) {
                    int cantidadProducto = entry.getKey();
                    Producto producto = entry.getValue();
                    this.mensaje += "Producto: " + producto.getDescripcion() + ", Cantidad: " + cantidadProducto + "\n";
                }
                JOptionPane.showMessageDialog(null, mensaje);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        padre.cargarDatosJTable();
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        padre.getMap().clear();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
//        Date fechaActual = new Date();
//        TicketJpaController t = new TicketJpaController();
//        TpvJpaController tpv = new TpvJpaController();
//        tpv.findTpv(1);
//        Tpv tpv1 =  tpv.findTpv(1);
//        int numPedido =  t.findNumPedidoMax()+1;
//        BigDecimal importeTotal = calcularImporteTotal(); 
//        Ticket ticket  = new Ticket(numPedido,importeTotal,fechaActual,tpv1);
//        t.create(ticket);
//        System.out.println(ticket);
        new Pago(this, true, padre.getMap()).setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed
    public BigDecimal calcularImporteTotal() {
        BigDecimal total = BigDecimal.ZERO;
        for (Map.Entry<Integer, Producto> entry : padre.getMap().entrySet()) {
            Producto producto = entry.getValue();
            int cantidad = entry.getKey();
            BigDecimal cantidadBigDecimal = BigDecimal.valueOf(cantidad);
            BigDecimal subtotal = producto.getPrecio().multiply(cantidadBigDecimal);

            // Sumo el subtotal al total 
            total = total.add(subtotal);

            // aplico el iva segun el que tenga
            if (producto.getIva().equalsIgnoreCase("21")) {
                BigDecimal iva21 = subtotal.multiply(BigDecimal.valueOf(0.21));
                total = total.add(iva21);
            } else if (producto.getIva().equalsIgnoreCase("10")) {
                BigDecimal iva10 = subtotal.multiply(BigDecimal.valueOf(0.10));
                total = total.add(iva10);
            }
        }
        return total;
    }

    public Map<Integer,Producto> getMap(){
        return this.map;
    }
//    public Ticket crearTicket() throws Exception {
//        // Obtener la fecha actual y otros datos necesarios
//        Date fechaActual = new Date();
//        TpvJpaController tpvController = new TpvJpaController();
//        ProductoJpaController prod = new ProductoJpaController();
//        Tpv tpv = tpvController.findTpv(1); // Suponiendo que siempre es el TPV con ID 1
//        BigDecimal importeTotal = calcularImporteTotal().setScale(2, RoundingMode.HALF_UP);
//        TicketJpaController ticketController = new TicketJpaController();
//        int numPedido = ticketController.findNumPedidoMax() + 1;
//        for (Map.Entry<Integer, Producto> entry : padre.getMap().entrySet()) {
//            Integer num = entry.getKey();
//            Producto producto = entry.getValue();
//            nuevoStock = producto.getStock() - num;
//            producto.setStock(nuevoStock);
//            prod.edit(producto);
//        }
//        // Crear el Ticket con los datos obtenidos
//        Ticket ticket = new Ticket(numPedido, importeTotal, fechaActual, tpv);
//        ticketController.create(ticket);
//
//        return ticket;
//    }
//
//    public List<DetalleTicket> crearDetalleTicket() throws Exception {
//        int idTicket = crearTicket().getIdTicket();
//        System.out.println(idTicket);
//        DetalleTicketJpaController detalleTicketController = new DetalleTicketJpaController();
//        List<DetalleTicket> lista = new ArrayList<>();
//
//        for (Map.Entry<Integer, Producto> entry : padre.getMap().entrySet()) {
//            Producto producto = entry.getValue();
//            int cantidad = entry.getKey();
//
//            DetalleTicketPK pk = new DetalleTicketPK();
//            pk.setIdTicket(idTicket);
//            pk.setIdProducto(producto.getIdProducto());
//
//            DetalleTicket detalleTicket = new DetalleTicket(pk, cantidad);
//            detalleTicketController.create(detalleTicket);
//            lista.add(detalleTicket);
//        }
//        return lista;
//    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
